  ---
  Marmalade Server Pages (MSP) - Design
  ---
  John Casey
  ---
  2004-11-26
  ---
  
Marmalade Server Pages (MSP) - Design

*Abstract

  This document will serve as the repository for design discussion for the MSP
  adaptation of the Marmalade scripting language. It contains a discussion of
  the design goals and the decisions made to achieve these goals. In addition, 
  it contains a diagram of the MSP handling architecture.
  
*Goals

  - <<Ability to manipulate HTTP headers>>
  
  - <<Ability to cache assembled ScriptBuilders>>: This must be configurable. The 
    default value should be <<ON>>.
    
  - <<Provide flexible architecture for locating scripts>>: The script locator
    should be an interface which could be implemented in any number of ways. The
    specific implementation used should be configurable on the MSPHandler itself.
    
  - <<Provide flexible context providers>>: The mechanism for providing context
    to the script must be an interface which could be implemented in any number
    of ways. The specific implementation should be configurable on the MSPHandler
    itself. <Several context values are required>:
    
    - <<request>>: The HttpServletRequest object
    
    - <<response>>: The HttpServletResponse object
    
    - <<session>>: The HttpSession object, if one exists
    
  - <<MSPHandler which is NOT a Servlet>>: The MSPHandler itself should <<not>>
    be an implementation of Servlet. This allows a servlet or filter to load
    the MSPHandler from a Spring context or other lightweight container.
    
  - <<MSPServlet which delegates directly to MSPHandler>>: This servlet should
    have a configuration point which allows the location of the MSPHandler
    container config to be specified. The servlet's workflow is as follows:
    
    [[1]] Retrieve the location of the MSPHandler container config.
    
    [[2]] Load the MSPHandler container.
    
    [[3]] Retrieve the MSPHandler instance from the container by it's <<wiring id>>.
    
          - <The <<wiring id>> is a public constant String specified in the 
            MSPHandler interface.>
          
    [[4]] Delegate the HTTP request to the MSPHandler instance, via an API call
          similar to:
          
          - <<<execute(request:HttpServletRequest,response:HttpServletResponse):void>>>

*Class Diagram

  The following class diagram illustrates the API for MSP handling.

+---+

  ++==========++               +------------+
  ||          ||               | MSPServlet |
  ||          ||               +------------+
  ||  Spring  ||                 |   |
  ||   API    ||<----------------+   | execute(request,response)
  ||          ||                     |
  ||          ||                     v
  ++==========++               +------------+
                               | MSPHandler |
                               +------------+
                                 |   |    |
     +---------------------------+   |    +----------+
     |                               |               |
     | find(request):ParsingCtx      |               | buildContext(request):
     |                               |               | >> ExecutionCtx
     v                               |               v
 +--------------+                    |         +-----------------+
 | ScriptFinder |                    |         | ContextProvider |
 +--------------+                    |         +-----------------+
                                     |
                                     |
                                     |
                                     v
      ++=============================================================++
      ||                                                             ||
      ||                       MARMALADE API                         ||
      ||                                                             ||
      ++=============================================================++

+---+

