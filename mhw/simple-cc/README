Simplified CruiseControl setup for maven projects
-------------------------------------------------

Mark Wilkinson <mhw@kremvax.net>

This is a template CruiseControl (CC) setup that simplifies maintenance
for maven projects.

You'll need to have the following installed:
  * JDK (obviously)
  * daemontools to keep things running (see http://cr.yp.to/daemontools.html)
  * xmlstarlet to perform xslt transformations
    (see http://xmlstar.sourceforge.net/). You can probably use xsltproc
    instead if that's all you have installed.

daemontools runs as root, but you probably want to run CC as a different
user. The scripts included here assume that the CC user will be called
'cruise' and that cruise's home directory will be /eng/cruisecontrol.

The layout of the archive is intended to be extracted into the root
directory of your (Unix) system. In outline things are laid out as
follows:

/service/cruisecontrol
	daemontools control files to run CC and a log service.
/eng/pkg/cruisecontrol
	cruisecontrol installation
/eng/pkg/maven
	maven installation
/eng/cruisecontrol
	home directory of the cruise user; everything happens here.
/eng/cruisecontrol/service/env
	environment settings made by daemontools before running CC
/end/cruisecontrol/service/log
	daemontools log files
/eng/cruisecontrol/src
	directory for checked-out source code
/eng/cruisecontrol/logs
	CC build log files; one directory per project
/eng/cruisecontrol/force-build
	one file per project; changes will force project to be rebuilt
/eng/cruisecontrol/.maven/repository
	maven repository; projects can specify dependencies on artifact
	groups in the maven repository

Configuration
-------------

One of the main contributions of this setup is a simplified configuration
file named 'meta-config.xml'. This file is transformed using the
'meta-config.xsl' stylesheet to produce CruiseControl's config.xml file
which makes maintenance much easier. A simple script called 'mkconfig'
will perform the transformation, regenerating CC's config.xml file.

meta-config.xsl contains some settings that you will need to alter before
you start. Find the <htmlemail> element in that file and change the
following:

 * returnaddress attribute - the address that the build emails will come
   from.
 * returnname attribute - the name that the build emails will appear to
   come from.
 * address attribute in <always> and <map> elements - an email address that
   should always get a copy of the build email, in addition to the
   developers who committed since the last successful build.

The general syntax of the file is:

<projects>
  <project name="project-name" [interval="seconds"]>
    <goal>goals to build</goal>
    [<srcdir>source directory</srcdir>]
    [<remote-project/>]
    [<repo-dependency>groupId</repo-dependency>*]
    [<srcdir-dependency>project-name</srcdir-dependency>*]
  </project>*
</projects>

The configuration file is basically a list of <project> elements. Each
project has a 'name' attribute. The optional 'interval' attribute
overrides the default CC build interval of 5 minutes. Each project
must contain a <goal> element that lists the maven goals that will
be built. A typical value would be 'clean jar:install-snapshot'.

A project's source is assumed to be in a directory in
/eng/cruisecontrol/src named after the project, so a project whose
'name' attribute was 'my-project' would have its source in
/eng/cruisecontrol/src/my-project. A <project> element can contain
an optional <srcdir> element that specifies a specific subdirectory
of the /eng/cruisecontrol/src directory. For example:

    <project name="plexus-container">
        <srcdir>plexus/plexus-container</srcdir>
        ...

The default CC behaviour is to email everyone who checked in changes
since the last build. If you're pulling source code from a remote
CVS repository who's users aren't local add the <remote-project/>
element. This will cause email to be sent to an address included in
the meta-config.xsl file.

CC doesn't know anything about project dependencies, so it can't
work out for itself that project B should be rebuilt if project A
has been rebuilt. This can be a problem if you're wanting to do
continuous integration builds. We support two types of dependencies.

A project can specify a dependency on artifacts in the maven repository
that are created by a specified group. More precisely, an element
<repo-dependency>classworlds</repo-dependency> will cause a project
to be rebuilt if any file under
/eng/cruisecontrol/.maven/repository/classworlds had changed.

A project can also specify a dependency on the build output of another
project.  An element <srcdir-dependency>classworlds</srcdir-dependency>
will cause a project to be rebuilt if any file under
${srcdir}/target has changed, where ${srcdir} is the source directory
for the named project.

The configuration also specifies that every project depends on a file
called /eng/cruisecontrol/force-build/${project-name}. This allows you
to force a project to be rebuilt by touching an appropriately named
file in the force-build directory. These files aren't automatically
created however.

Adding a project
----------------

To add a project:
 * As the 'cruise' user check-out the source code into the
   /eng/cruisecontrol/src directory.
 * Add a suitable entry to meta-config.xml
 * Run mkconfig
 * Restart CC: svc -t /service/cruisecontrol

You might want to touch /eng/cruisecontrol/force-build/${project-name}
because CC will assume everything is up to date when you first add the
project.
